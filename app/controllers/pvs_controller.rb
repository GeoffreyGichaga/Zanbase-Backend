class PvsController < ApplicationController

=begin

# Things to work on 
1. redundancy 
- some codes have been repeated 
- Need for methods to remove redundancy
=end









    # Users viewing their pvs 
    def index 
        users_pv = Pv.where(user_id: @current_user.id)
        render json: users_pv, status: :ok                
    end



# Generate payment request
=begin 
    Used to request the payments to be made from quotations to invoices to Employees PV's
    Key Infomation to produce includes:
    1. Generated by : (Has to be the current logged in user)
    2. Budget Holder: (budget holder of the org user is working for)
    3. Paid by : The organisation user is working for - can only be ZAG or ZAP 
    4. Payee : The user (employee/intern /consultant)
    5. Telephone: User's Phone Number 
    6. Account Number : Users's Bank / Mpesa 
        # Need for an Option button to define whether payment is through mpesa/bank 
    7. Bank : User's Bank name 
    8. Description:
        Must include :
        # Intern/Consultant/Employee title 
        # Stipend/salary/compenstaion 
        # Name of the employee
        # Work Period - 14th of previous month  - 13th of the current month
    9. Cost
    10.Budget Code 
        # Allocate the relevant budget code basing on the employee type(Intern/consultant/employee)
     


    # Payment Process Section to be updated later 
    
=end
    
    def payment_request_form

        # 1. Generated by
        generated_by = "#{@current_user.firstname} #{@current_user.lastname}"


        # 2. Budget Holder
        if(@current_user.department.organisation == "ZAP")
            budget_holder = "Roopal Thaker"
        else
            budget_holder =  "Megan Mukuria"
        end 



        # 3. Paid by
        if(@current_user.org == "ZanaAfrica Programs")
            paid_by = "ZAP"
        else
            paid_by = "ZAG"
        end 

        # 4. Payee
        payee = generated_by

        #  5/ Telephone
        telephone = @current_user.user_detail.telephone_number

        # 6. Account Number
        account = @current_user.user_detail.account_number

        # 7. Bank
        bank = @current_user.user_detail.bank_name

        # 8. Description 
            # Role 
            user_role = @current_user.role

            # Type of payment(Stipend/Salary)
            if(@current_user.role == "Intern")
                type_of_payment = "Stipend"
            elsif(@current_user.role == "Employee")
                type_of_payment = "Salary"
            else
                type_of_payment = "Compensation"
            end

            # Name of the user 
            user_name = generated_by

            # The Working Period 
            start_date = @current_user.attendance.first.date
            end_date = @current_user.attendance.first.date


            #Complete description  
        description = "#{user_role} #{type_of_payment} for #{user_name} from #{start_date} - #{end_date}"



        # 9. Cost - Amount to be Paid 
        cost = @current_user.attendance.count * 500

        # 10.Budget Code
        if(@current_user.role = "Intern")
            budget_code = 8410
        else
            budget_code = 8100
        end 



        

        # All payment Request Form Information 

        payment_request_info = {
            # User's Information on the Payment Request form 
            :generated_by => generated_by,
            :budget_holder => budget_holder,
            :payee => payee,
            :paid_by => paid_by,
            :telephone => telephone,
            :account => account,
            :bank => bank ,
            :description => description,
            :cost => cost,
            :budget_code => budget_code,

            # Authorization Section 

            # Checked by & It's date  
            :checked_by => "Not Checked",
            :checked_by_date => "Not Checked",

            # Approved by 1 & It's date 
            :approved_by_budegt_holder_1 => "Not Approved",
            :approved_by_budegt_holder_1_date => "Not Approved",

            # Approved by 1 & It's date
            :approved_by_budegt_holder_2 => "Not Approved",
            :approved_by_budegt_holder_2_date => "Not Approved"

        }

        render json: payment_request_info, status: :ok

    end 



















# Generate Payment Approval Form 
=begin 
Used to Approve the payments to be made from quotations to invoices to Employees PV's
Key Infomation to produce includes:

1. Date - Should be the submission date mostly 13th for ZAP 
2. Org - User's Organisation (ZAG/ZAP)
3. Program - ZanaAfrica Programs / ZanaAfrica Group 
4. Function - User's Role (Intern/Consultant/Employee)
    # Intern/Consultant/Employee Details 
5. Name  
6. ID Number 
7. Start Date of the Week 
    # If working date does not start on 14th put the exact start date of working else put 14th 
8. End Date of the Week
    # If working date does not end on 13th put the exact end date of working else put 13th 
9. Number of days Worked
    # Length of the attendance register array 
10.Amount Payable 
    # Number of days worked * the amount paid as agreed 
    # This will depend on the type of employee 


    
# Payment Details 
11. Name on Account - User's Name 
12. Bank 
13. Account Number 
14. Bank Code 
15. Branch code 
16. Telephone Number 


# Approval Section 

17. Prepared by (the Intern/Consultant/Employee)
    # Name 
    #Signature
    # Date (Date of submitting the PV)


    To be sent as null
18. Approved by (the Supervisor)
    # Name 
    #Signature
    # Date (Date of signing the PV)

19. Authorized by 
    # Name 
    #Signature
    # Date (Date of authorizing the PV)




=end 










    # User's Creating Pv's
 
    def create
        # 1. Date - Date of generating pv 
        current_date = Time.new
        date = "#{current_date.day}/#{current_date.month}/#{current_date.year}"



        # 2. Org - The organisation the user belongs to 
        user_organisation = @current_user.org
        

        # 3. Program - Progams 
        if(user_organisation == "ZAP")
            program = "ZanaAfrica Programs"
        else
            program = "ZanaAfrica Group"
        end

        

        # 4. Function - Role of the current user 
        # Separate role from Job title 
        function = @current_user.role




        # Employee details 
        #  5. Name
        name = "#{@current_user.firstname} - #{@current_user.lastname}"

        # 6. ID Number -employee national id number
        employee_id = @current_user.user_detail.id_number

        # 7. Start Date of the Week 
        start_day_of_the_week = "#{@current_user.attendances.first.date}"
        
        # 8. End Date of the Week
        end_date_of_the_week  = "#{@current_user.attendances.last.date}"

        # 9. Number of days Worked
        number_of_days_worked = @current_user.attendances.count

        # 10.Amount Payable
        # This Varies depending on the type of contract/ salary terms with the HR
        # Payment calculation below are for interns only
        amount_payable = @current_user.attendance.count * 500



        # Payment Details 
        # 11. Name on Account
        name_on_account = @current_user.user_detail.name_on_account

        # 12. Bank 
        bank = @current_user.user_detail.bank_name

        # 13. Account Number 
        account = @current_user.user_detail.account_number

        # 14. Bank Code 
        bank_code = @current_user.user_detail.bank_code

        # 15. Branch code 
        branch_code = @current_user.user_detail.branch_code

        # 16. Telephone Number
        telephone = @current_user.user_detail.telephone_number

        # Authorization Section 
        # 17. Prepared by (the Intern/Consultant/Employee)
            # Name 
            prepared_by = "#{@current_user.firstname} #{@current_user.lastname}"

            # Signature
            user_signature = "#{@current_user.firstname[0]}.#{@current_user.lastname[0]}"
            # Date (Date of submitting the PV)
            prepared_by_date = date


        


        # To be sent as NUll 
        # prepared_by = "#{@current_user.firstname} #{@current_user.lastname}"
        # approved_by = @current_user.supervisor
        # authorized_by = "Roopal Thaker"

       

        approval_form_info = {
            # Top General Info 
            :date => date,
            :org => user_organisation,
            :program => program,
            :function => function,

            # Employee / Intern Details
            :name => name,
            :employee_id => employee_id,
            :start_day_of_the_week => start_day_of_the_week,
            :end_date_of_the_week => end_date_of_the_week,
            :number_of_days_worked => number_of_days_worked,
            :amount_payable => amount_payable,


            # Payment Details
            :name_on_account => name_on_account,
            :bank => bank,
            :account => account,
            :bank_code => bank_code,
            :branch_code => branch_code,
            :telephone => telephone,

            # Approval section 
            :prepared_by_name => prepared_by,
            :user_signature_sign => user_signature,
            :prepared_by_date => prepared_by_date

            # Supervisor
            # :approved_by_name => "Not Approved",
            # :approved_by_signature => "Not Approved",
            # :approved_by_date => "Not Approved",

            # Authorizor 

            # :authorized_by_name => "Not Approved",
            # :authorized_by_sign => "Not Approved",
            # :authorized_by_date => "Not Approved"





        }
    

        
        render json: approval_form_info, status: :created

    end
    
 end















# t.string "employee_details"
# t.string "payment_details"
# t.string "prepared_by"
# t.string "approved_by"
# t.string "authorized_by"
# t.datetime "created_at", precision: 6, null: false
# t.datetime "updated_at", precision: 6, null: false
# t.integer "user_id"
# t.string "date"
# t.string "org"
# t.string "program"
# t.string "function"


